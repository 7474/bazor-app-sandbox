/* 
 * Makerel API
 *
 * This is part of Makerel API.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Koudenpa.Mackerel.Api.Client;
using Koudenpa.Mackerel.Api.Model;

namespace Koudenpa.Mackerel.Api.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHostMetricApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Koudenpa.Mackerel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostMetrics"></param>
        /// <returns>ApiResponse</returns>
        ApiResponse PostHostMetric (List<HostMetricValue> hostMetrics);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Koudenpa.Mackerel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostMetrics"></param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> PostHostMetricWithHttpInfo (List<HostMetricValue> hostMetrics);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHostMetricApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Koudenpa.Mackerel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostMetrics"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> PostHostMetricAsync (List<HostMetricValue> hostMetrics);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Koudenpa.Mackerel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostMetrics"></param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> PostHostMetricAsyncWithHttpInfo (List<HostMetricValue> hostMetrics);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHostMetricApi : IHostMetricApiSync, IHostMetricApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HostMetricApi : IHostMetricApi
    {
        private Koudenpa.Mackerel.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HostMetricApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HostMetricApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HostMetricApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HostMetricApi(String basePath)
        {
            this.Configuration = Koudenpa.Mackerel.Api.Client.Configuration.MergeConfigurations(
                Koudenpa.Mackerel.Api.Client.GlobalConfiguration.Instance,
                new Koudenpa.Mackerel.Api.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Koudenpa.Mackerel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Koudenpa.Mackerel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Koudenpa.Mackerel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HostMetricApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HostMetricApi(Koudenpa.Mackerel.Api.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Koudenpa.Mackerel.Api.Client.Configuration.MergeConfigurations(
                Koudenpa.Mackerel.Api.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Koudenpa.Mackerel.Api.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Koudenpa.Mackerel.Api.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Koudenpa.Mackerel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HostMetricApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HostMetricApi(Koudenpa.Mackerel.Api.Client.ISynchronousClient client,Koudenpa.Mackerel.Api.Client.IAsynchronousClient asyncClient, Koudenpa.Mackerel.Api.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Koudenpa.Mackerel.Api.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Koudenpa.Mackerel.Api.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Koudenpa.Mackerel.Api.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Koudenpa.Mackerel.Api.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Koudenpa.Mackerel.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Koudenpa.Mackerel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostMetrics"></param>
        /// <returns>ApiResponse</returns>
        public ApiResponse PostHostMetric (List<HostMetricValue> hostMetrics)
        {
             Koudenpa.Mackerel.Api.Client.ApiResponse<ApiResponse> localVarResponse = PostHostMetricWithHttpInfo(hostMetrics);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Koudenpa.Mackerel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostMetrics"></param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public Koudenpa.Mackerel.Api.Client.ApiResponse< ApiResponse > PostHostMetricWithHttpInfo (List<HostMetricValue> hostMetrics)
        {
            // verify the required parameter 'hostMetrics' is set
            if (hostMetrics == null)
                throw new Koudenpa.Mackerel.Api.Client.ApiException(400, "Missing required parameter 'hostMetrics' when calling HostMetricApi->PostHostMetric");

            Koudenpa.Mackerel.Api.Client.RequestOptions localVarRequestOptions = new Koudenpa.Mackerel.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Koudenpa.Mackerel.Api.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Koudenpa.Mackerel.Api.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = hostMetrics;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< ApiResponse >("/tsdb", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostHostMetric", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Koudenpa.Mackerel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostMetrics"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> PostHostMetricAsync (List<HostMetricValue> hostMetrics)
        {
             Koudenpa.Mackerel.Api.Client.ApiResponse<ApiResponse> localVarResponse = await PostHostMetricAsyncWithHttpInfo(hostMetrics);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="Koudenpa.Mackerel.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hostMetrics"></param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<Koudenpa.Mackerel.Api.Client.ApiResponse<ApiResponse>> PostHostMetricAsyncWithHttpInfo (List<HostMetricValue> hostMetrics)
        {
            // verify the required parameter 'hostMetrics' is set
            if (hostMetrics == null)
                throw new Koudenpa.Mackerel.Api.Client.ApiException(400, "Missing required parameter 'hostMetrics' when calling HostMetricApi->PostHostMetric");


            Koudenpa.Mackerel.Api.Client.RequestOptions localVarRequestOptions = new Koudenpa.Mackerel.Api.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.Data = hostMetrics;

            // authentication (apiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Api-Key")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-Api-Key", this.Configuration.GetApiKeyWithPrefix("X-Api-Key"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ApiResponse>("/tsdb", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostHostMetric", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
