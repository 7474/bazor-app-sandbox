/* 
 * Makerel API
 *
 * This is part of Makerel API.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Koudenpa.Mackerel.Api.Client.OpenAPIDateConverter;

namespace Koudenpa.Mackerel.Api.Model
{
    /// <summary>
    /// Host
    /// </summary>
    [DataContract]
    public partial class Host :  IEquatable<Host>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Host" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Host() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Host" /> class.
        /// </summary>
        /// <param name="createdAt">ホストの登録時刻（epoch秒） (required).</param>
        /// <param name="id">ホストID (required).</param>
        /// <param name="name">ホスト名 (required).</param>
        /// <param name="displayName">optional ホストの管理名.</param>
        /// <param name="customIdentifier">optional ホストに対するユーザー独自の識別子.</param>
        /// <param name="meta">ホストのメタ情報 (required).</param>
        /// <param name="interfaces">ホストのネットワークインターフェース情報 (required).</param>
        /// <param name="type">ホストの種別（\&quot;agent\&quot;, \&quot;container-agent\&quot;, \&quot;cloud\&quot; など） (required).</param>
        /// <param name="status">ホストのステータス（\&quot;working\&quot;, \&quot;standby\&quot; など） (required).</param>
        /// <param name="memo">ホストに関するメモ。メモは管理画面から編集できます。 (required).</param>
        /// <param name="isRetired">ホストが退役しているかどうか (required).</param>
        /// <param name="retiredAt">optional ホストの退役時刻（epoch秒） (required).</param>
        /// <param name="roles">ホストが所属しているロールの一覧。キーはサービス名、値はそのサービスにおけるロール名の配列です。 (required).</param>
        public Host(decimal createdAt = default(decimal), string id = default(string), string name = default(string), string displayName = default(string), string customIdentifier = default(string), Object meta = default(Object), List<Object> interfaces = default(List<Object>), string type = default(string), string status = default(string), string memo = default(string), bool isRetired = default(bool), decimal retiredAt = default(decimal), Object roles = default(Object))
        {
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for Host and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }

            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for Host and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Host and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "meta" is required (not null)
            if (meta == null)
            {
                throw new InvalidDataException("meta is a required property for Host and cannot be null");
            }
            else
            {
                this.Meta = meta;
            }

            // to ensure "interfaces" is required (not null)
            if (interfaces == null)
            {
                throw new InvalidDataException("interfaces is a required property for Host and cannot be null");
            }
            else
            {
                this.Interfaces = interfaces;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for Host and cannot be null");
            }
            else
            {
                this.Type = type;
            }

            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for Host and cannot be null");
            }
            else
            {
                this.Status = status;
            }

            // to ensure "memo" is required (not null)
            if (memo == null)
            {
                throw new InvalidDataException("memo is a required property for Host and cannot be null");
            }
            else
            {
                this.Memo = memo;
            }

            // to ensure "isRetired" is required (not null)
            if (isRetired == null)
            {
                throw new InvalidDataException("isRetired is a required property for Host and cannot be null");
            }
            else
            {
                this.IsRetired = isRetired;
            }

            // to ensure "retiredAt" is required (not null)
            if (retiredAt == null)
            {
                throw new InvalidDataException("retiredAt is a required property for Host and cannot be null");
            }
            else
            {
                this.RetiredAt = retiredAt;
            }

            // to ensure "roles" is required (not null)
            if (roles == null)
            {
                throw new InvalidDataException("roles is a required property for Host and cannot be null");
            }
            else
            {
                this.Roles = roles;
            }

            this.DisplayName = displayName;
            this.CustomIdentifier = customIdentifier;
        }
        
        /// <summary>
        /// ホストの登録時刻（epoch秒）
        /// </summary>
        /// <value>ホストの登録時刻（epoch秒）</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public decimal CreatedAt { get; set; }

        /// <summary>
        /// ホストID
        /// </summary>
        /// <value>ホストID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// ホスト名
        /// </summary>
        /// <value>ホスト名</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// optional ホストの管理名
        /// </summary>
        /// <value>optional ホストの管理名</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// optional ホストに対するユーザー独自の識別子
        /// </summary>
        /// <value>optional ホストに対するユーザー独自の識別子</value>
        [DataMember(Name="customIdentifier", EmitDefaultValue=false)]
        public string CustomIdentifier { get; set; }

        /// <summary>
        /// ホストのメタ情報
        /// </summary>
        /// <value>ホストのメタ情報</value>
        [DataMember(Name="meta", EmitDefaultValue=false)]
        public Object Meta { get; set; }

        /// <summary>
        /// ホストのネットワークインターフェース情報
        /// </summary>
        /// <value>ホストのネットワークインターフェース情報</value>
        [DataMember(Name="interfaces", EmitDefaultValue=false)]
        public List<Object> Interfaces { get; set; }

        /// <summary>
        /// ホストの種別（\&quot;agent\&quot;, \&quot;container-agent\&quot;, \&quot;cloud\&quot; など）
        /// </summary>
        /// <value>ホストの種別（\&quot;agent\&quot;, \&quot;container-agent\&quot;, \&quot;cloud\&quot; など）</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// ホストのステータス（\&quot;working\&quot;, \&quot;standby\&quot; など）
        /// </summary>
        /// <value>ホストのステータス（\&quot;working\&quot;, \&quot;standby\&quot; など）</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// ホストに関するメモ。メモは管理画面から編集できます。
        /// </summary>
        /// <value>ホストに関するメモ。メモは管理画面から編集できます。</value>
        [DataMember(Name="memo", EmitDefaultValue=false)]
        public string Memo { get; set; }

        /// <summary>
        /// ホストが退役しているかどうか
        /// </summary>
        /// <value>ホストが退役しているかどうか</value>
        [DataMember(Name="isRetired", EmitDefaultValue=false)]
        public bool IsRetired { get; set; }

        /// <summary>
        /// optional ホストの退役時刻（epoch秒）
        /// </summary>
        /// <value>optional ホストの退役時刻（epoch秒）</value>
        [DataMember(Name="retiredAt", EmitDefaultValue=false)]
        public decimal RetiredAt { get; set; }

        /// <summary>
        /// ホストが所属しているロールの一覧。キーはサービス名、値はそのサービスにおけるロール名の配列です。
        /// </summary>
        /// <value>ホストが所属しているロールの一覧。キーはサービス名、値はそのサービスにおけるロール名の配列です。</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public Object Roles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Host {\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  CustomIdentifier: ").Append(CustomIdentifier).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Interfaces: ").Append(Interfaces).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Memo: ").Append(Memo).Append("\n");
            sb.Append("  IsRetired: ").Append(IsRetired).Append("\n");
            sb.Append("  RetiredAt: ").Append(RetiredAt).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Host);
        }

        /// <summary>
        /// Returns true if Host instances are equal
        /// </summary>
        /// <param name="input">Instance of Host to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Host input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedAt == input.CreatedAt ||
                    this.CreatedAt.Equals(input.CreatedAt)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.CustomIdentifier == input.CustomIdentifier ||
                    (this.CustomIdentifier != null &&
                    this.CustomIdentifier.Equals(input.CustomIdentifier))
                ) && 
                (
                    this.Meta == input.Meta ||
                    (this.Meta != null &&
                    this.Meta.Equals(input.Meta))
                ) && 
                (
                    this.Interfaces == input.Interfaces ||
                    this.Interfaces != null &&
                    input.Interfaces != null &&
                    this.Interfaces.SequenceEqual(input.Interfaces)
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Memo == input.Memo ||
                    (this.Memo != null &&
                    this.Memo.Equals(input.Memo))
                ) && 
                (
                    this.IsRetired == input.IsRetired ||
                    this.IsRetired.Equals(input.IsRetired)
                ) && 
                (
                    this.RetiredAt == input.RetiredAt ||
                    this.RetiredAt.Equals(input.RetiredAt)
                ) && 
                (
                    this.Roles == input.Roles ||
                    (this.Roles != null &&
                    this.Roles.Equals(input.Roles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.CustomIdentifier != null)
                    hashCode = hashCode * 59 + this.CustomIdentifier.GetHashCode();
                if (this.Meta != null)
                    hashCode = hashCode * 59 + this.Meta.GetHashCode();
                if (this.Interfaces != null)
                    hashCode = hashCode * 59 + this.Interfaces.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Memo != null)
                    hashCode = hashCode * 59 + this.Memo.GetHashCode();
                hashCode = hashCode * 59 + this.IsRetired.GetHashCode();
                hashCode = hashCode * 59 + this.RetiredAt.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
